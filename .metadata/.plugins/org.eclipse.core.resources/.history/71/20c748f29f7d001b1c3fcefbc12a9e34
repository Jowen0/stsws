package org.zerock.controller;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.zerock.dto.TodoDTO;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/todo/*") //안전하게 ("/todo/*")선언
@Log4j
@RequiredArgsConstructor
public class TodoOldController {
	
	@GetMapping({"/add","/add2"}) //spring 4.3부터 GET/POST Mapping 지원
	public void add() {
		
		log.info("get...........");
		
	}
	
	@PostMapping("add")
	public String addPost(@Valid TodoDTO todoDTO, BindingResult result, RedirectAttributes rttr) {
		
		log.info("========================");
		log.info(todoDTO);
		
		//hasErrors - 에러가 있다면
		if(result.hasErrors()) {
			log.info("has errors" + result);
			return "/todoOld/addOld";
		}
										
//		return "redirect:/todo/list?msg=success"; //과거전통적인 방식
												//뒤에 파라미터를 url에 붙인다.
		
		//RedirctAttributes rttr이 추가되고
		rttr.addFlashAttribute("msg", "success");
		
		return "redirect:/todoOld/listOld";
		
	}
	
	@PostMapping("add2")
	@ResponseBody
	public Object add2Post(@Valid TodoDTO todoDTO, BindingResult result) {
		
		log.info("========================");
		log.info(todoDTO);
		
		//hasErrors - 에러가 있다면
		if(result.hasErrors()) {
			log.info("has errors" + result);
			
			return result.getAllErrors();
		}
		
		return null;
		
	}
	
	@GetMapping("/listOld")
	public void list(Model model) {
		log.info("list..........");
		//원래라면 Mapper를 통해서 DB에서 가져온 데이터를 가공해야 한다.
		//DB연동전에 먼저 로직을 체크하기 위해서 더미 데이터를 만들어서 List 페이지에 뿌리기
		//위한 더미 데이터를 만든다.
		
		//range - 1,10 = 1부터 9까지 / rangeClosed - 1,10 = 1부터 10까지
		List<TodoDTO> list = IntStream.rangeClosed(1, 10).mapToObj(i -> {
			TodoDTO dto = new TodoDTO();
			dto.setTno(i);
			dto.setTitle("aaaa" + i);
			return dto;
		}).collect(Collectors.toList());
		//위 코드 해석 각각의 i번째 마다 TodoDTO를 만들고, collect로 list로 묶는다.
											
		model.addAttribute("list", list); //Attribute할 때 
										  //Type의 앞글자를 소문자로 바꿔준다.
										  //ex: List -> list
	}
	
}
